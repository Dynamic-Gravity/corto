#package ::test

int8 initCalled: 0
int8 constructCalled: 0
int8 destructCalled: 0

class Foo::
    fail: bool, local
    x, y: int32
    int16 init()
    int16 construct()
    void destruct()

class Bar::
    int16 init()

struct Point::
    x, y: int32

struct Point3D: Point::
    z: int32

struct Line::
    start, stop: Point

struct PrimitiveCollection::
    ints: list{int32}

struct CompositeCollection::
    points: list{Point}

struct VoidParent: parentType = void::
    foo: int32

struct DefinedParent: parentState = defined ::
    foo: int32

struct DeclaredParent: parentState = declared::
    foo: int32

// Object management testcases
test::Suite ObjectMgmt::
    prevAttr: lang::attr, local|private

    void setup() method
    void teardown() method

    void tc_invalidate()

    void tc_declareVoid()
    void tc_declareInt()
    void tc_declareFoo()
    void tc_declareVoidAttr0()
    void tc_declareIntAttr0()
    void tc_declareFooAttr0()
    void tc_declareInitFail()
    void tc_declareNullType()
    void tc_declareInvalidType()

    void tc_createVoid()
    void tc_createInt()
    void tc_createFoo()
    void tc_createVoidAttr0()
    void tc_createIntAttr0()
    void tc_createFooAttr0()
    void tc_createInitFail()
    void tc_createNullType()
    void tc_createInvalidType()

    void tc_defineVoid()
    void tc_defineInt()
    void tc_defineFoo()
    void tc_defineVoidAttr0()
    void tc_defineIntAttr0()
    void tc_defineFooAttr0()
    void tc_defineFooFail()

    void tc_declareChildVoid()
    void tc_declareChildInt()
    void tc_declareChildFoo()
    void tc_declareChildVoidAttr0()
    void tc_declareChildIntAttr0()
    void tc_declareChildFooAttr0()
    void tc_declareChildInitFail()
    void tc_declareChildParentStateErr()
    void tc_declareChildParentTypeErr()
    void tc_declareExistingWithParentState()
    void tc_declareChildNullType()
    void tc_declareChildInvalidType()
    void tc_redeclareWithDifferentType()

    void tc_createChildVoid()
    void tc_createChildInt()
    void tc_createChildFoo()
    void tc_createChildVoidAttr0()
    void tc_createChildIntAttr0()
    void tc_createChildFooAttr0()
    void tc_createChildInitFail()
    void tc_createChildParentStateErr()
    void tc_createChildParentTypeErr()
    void tc_createChildNullType()
    void tc_createChildInvalidType()

    void tc_createChildNested()
    void tc_drop()

// Generate fully scoped names
test::Suite Fullname::
    void tc_root()
    void tc_onelevel()
    void tc_twolevels()
    void tc_null()
    void tc_nullBuffer()

// Generate names relative to an object
test::Suite RelativeName::
    void setup() method
    void teardown() method

    tier1: object
    tier2: object
    tier3: object
    obj: object
    disjunct: object
    child: object

    void tc_fromRoot()
    void tc_fromParent()
    void tc_fromOneUp()
    void tc_fromTwoUp()
    void tc_fromThreeUp()
    void tc_fromChild()
    void tc_fromGrandchild()
    void tc_fromDisjunct()
    void tc_fromSelf()
    void tc_rootFromObj()

void functionToResolve(int32 a, int32 b)

// Resolve algorithm testcases
test::Suite Resolver::
    void setup() method
    void teardown() method

    void tc_resolveNull()
    void tc_resolveRoot()
    void tc_resolveThis()
    void tc_resolveCorto()
    void tc_resolveLang()
    void tc_resolveString()
    void tc_resolveIo()
    void tc_resolveAnonymous()
    void tc_resolveEmptyString()

    void tc_resolveParenthesesNoFunction()
    void tc_resolveParenthesesNoFunctionArgs()
    void tc_resolveParenthesesNoFunctionMatchingArgs()

    void tc_resolveParenthesesNoFunctionScoped()
    void tc_resolveParenthesesNoFunctionArgsScoped()
    void tc_resolveParenthesesNoFunctionMatchingArgsScoped()

    void tc_resolveFunctionNoArgs()
    void tc_resolveFunctionArgs()
    void tc_caseInsensitive()

    void tc_resolveAll()

// Select testcases
struct selectItem::
    parent : string
    name : string
    type : string

test::Suite Select::
    void setup() method
    void teardown() method

    list{selectItem} collect(object @scope, string expr) function
    bool hasObject(list{selectItem} items, string parent, string name, string type) function

    void tc_selectErrParentTree()
    void tc_selectErrParentId()
    void tc_selectErrParentAst()
    void tc_selectErrParentWc()
    void tc_selectErrScopeScope()

    void tc_selectThis()
    void tc_selectParent()
    void tc_selectIdentifier()
    void tc_selectIdentifierCaps()
    void tc_selectNumeric()
    void tc_selectUnderscore()
    void tc_selectScopedThis()
    void tc_selectScopedParent()
    void tc_selectScopedIdentifier()

    void tc_selectScope()
    void tc_selectScopeWithWildcard()
    void tc_selectScopeWithAsterisk()
    void tc_selectScopeWithWildcardFilter()
    void tc_selectScopeWithAsteriskFilter()

    void tc_selectTree()
    void tc_selectTreeWithWildcard()
    void tc_selectTreeWithAsterisk()
    void tc_selectTreeWithWildcardFilter()
    void tc_selectTreeWithAsteriskFilter()

    void tc_selectFilterAsterisk()
    void tc_selectFilterWildcard()

// Test Event scenarios
class EventTest::
    @scope: object
    lastThis: object, readonly
    lastObservable: object, readonly

    int16 construct()

    observer onDeclare:      ON_DECLARE|ON_SELF|ON_TREE
    observer onDeclareSelf:  ON_DECLARE
    observer onDeclareScope: ON_DECLARE|ON_SCOPE
    observer onDeclareTree:  ON_DECLARE|ON_TREE
    countDeclare: uint32, readonly
    countDeclareSelf: uint32, readonly
    countDeclareScope: uint32, readonly
    countDeclareTree: uint32, readonly

    observer onDefine:       ON_DEFINE|ON_SELF|ON_TREE
    observer onDefineSelf:   ON_DEFINE
    observer onDefineScope:  ON_DEFINE|ON_SCOPE
    observer onDefineTree:   ON_DEFINE|ON_TREE
    countDefine: uint32, readonly
    countDefineSelf: uint32, readonly
    countDefineScope: uint32, readonly
    countDefineTree: uint32, readonly

    observer onUpdate:       ON_UPDATE|ON_SELF|ON_TREE
    observer onUpdateSelf:   ON_UPDATE
    observer onUpdateScope:  ON_UPDATE|ON_SCOPE
    observer onUpdateTree:   ON_UPDATE|ON_TREE
    countUpdate: uint32, readonly
    countUpdateSelf: uint32, readonly
    countUpdateScope: uint32, readonly
    countUpdateTree: uint32, readonly

    observer onDelete:       ON_DELETE|ON_SELF|ON_TREE
    observer onDeleteSelf:   ON_DELETE
    observer onDeleteScope:  ON_DELETE|ON_SCOPE
    observer onDeleteTree:   ON_DELETE|ON_TREE
    countDelete: uint32, readonly
    countDeleteSelf: uint32, readonly
    countDeleteScope: uint32, readonly
    countDeleteTree: uint32, readonly

test::Suite Event::
    void setup() method
    void teardown() method

    et: EventTest
    prevAttr: attr

    void tc_onDeclare()
    void tc_onDeclareSelf()
    void tc_onDeclareScope()
    void tc_onDeclareTree()

    void tc_onDefine()
    void tc_onDefineSelf()
    void tc_onDefineScope()
    void tc_onDefineTree()

    void tc_onUpdate()
    void tc_onUpdateSelf()
    void tc_onUpdateScope()
    void tc_onUpdateTree()

    void tc_onDelete()
    void tc_onDeleteSelf()
    void tc_onDeleteScope()
    void tc_onDeleteTree()

    void tc_updateVoidErr()
    void tc_updateUndefined()

// Overloading testcases
void ol_null(object a)
void ol_null(string a)
void ol_null(bool a)

void ol_object(object a)
void ol_string(string a)
void ol_bool(bool a)

void ol_wildcard(int32 a, string b)
void ol_wildcard(float32 a, string b)

void ol_int(int32 a)
void ol_uint(int32 a)

void ol_num(int32 a)
void ol_num(float64 a)

enum Color:: Red, Orange, Yellow, Green, Blue
void ol_any(bool a)
void ol_any(char a)
void ol_any(int32 a)
void ol_any(float32 a)
void ol_any(string a)
void ol_any(object a)
void ol_any(Color a)

class Animal::
    a: bool

class Dog : Animal::
    b: bool

class GoldenRetriever : Dog::
    c: bool

class Cat : Animal::
    b: bool

void ol_inherit(Animal a)
void ol_inherit(Dog a)

test::Suite Overload::
    void tc_ambiguous()
    void tc_ambiguousWildcard()
    void tc_ambiguousNull()

    void tc_wildcard()

    void tc_nullObject()
    void tc_nullString()
    void tc_nullBool()

    void tc_anyChar()
    void tc_anyInt8()
    void tc_anyInt16()
    void tc_anyInt32()
    void tc_anyInt64()
    void tc_anyUint8()
    void tc_anyUint16()
    void tc_anyUint32()
    void tc_anyUint64()
    void tc_anyFloat32()
    void tc_anyFloat64()
    void tc_anyOctet()
    void tc_anyWord()
    void tc_anyString()
    void tc_anyColor()

    void tc_numChar()
    void tc_numInt8()
    void tc_numInt16()
    void tc_numInt32()
    void tc_numInt64()
    void tc_numUint8()
    void tc_numUint16()
    void tc_numUint32()
    void tc_numUint64()
    void tc_numFloat32()
    void tc_numFloat64()
    void tc_numOctet()
    void tc_numWord()
    void tc_numString()
    void tc_numColor()

    void tc_inheritanceBase()
    void tc_inheritanceSub()
    void tc_inheritanceMatchSub()
    void tc_inheritSibling()


class MethodTester::
    void simple()
    void onearg(int32 a)
    void twoargs(int32 a, int32 b)
    void overload(int32 a)
    void overload(string a)
    void overload(int32 a, int32 b)
    void overload(MethodTester m)
    void virtualSimple() virtual
    void virtualOverload() virtual
    void virtualOverload(int32 a)

class MethodTesterInherit: MethodTester::
    void simple()
    void overload(string a, string b)
    void overload(MethodTesterInherit m)
    void virtualOverload(int32 a)

// Test resolving methods
test::Suite MethodResolver::
    void tc_simple()
    void tc_simpleNoArgs()
    void tc_simpleErr()
    void tc_simpleErrType()
    void tc_onearg()
    void tc_oneargNoArgs()
    void tc_oneargErr()
    void tc_oneargErrType()
    void tc_twoargs()
    void tc_twoargsNoArgs()
    void tc_twoargsSpaces()
    void tc_overloadInt()
    void tc_overloadString()
    void tc_overloadTwoArgs()
    void tc_overloadClass()
    void tc_overloadAmbiguous()
    void tc_virtualSimple()
    void tc_virtualSimpleNoArgs()
    void tc_virtualOverload()
    void tc_virtualOverloadNoArgs()
    void tc_virtualOverloadArg()
    void tc_inheritSimple()
    void tc_inheritSimpleNoArgs()
    void tc_inheritOverload()
    void tc_inheritOverloadBaseInt()
    void tc_inheritOverloadBaseString()
    void tc_inheritOverloadBaseTwoArgs()
    void tc_inheritOverloadBaseClass()
    void tc_inheritOverloadNoArgs()
    void tc_inheritOverloadClass()
    void tc_inheritVirtualOverload()
    void tc_inheritVirtualOverloadNoArgs()
    void tc_nonexisting()
    void tc_redeclare()

class AnonymousTest::
    objects: list{object}

// String deserializer testcases
test::Suite StringDeserializer::
    void setup() method
    void teardown() method

    void tc_errMissingType()
    void tc_errExcessElements()
    void tc_errUnresolvedType()
    void tc_errUnresolvedMember()
    void tc_errNotAType()
    void tc_errTypeMismatch()

    void tc_deserExisting()
    void tc_deserExisting_w_type()
    void tc_deserExisting_w_scopedType()

    void tc_deserBoolTrue()
    void tc_deserBoolFalse()
    void tc_deserBoolInvalid()

    void tc_deserChar()
    void tc_deserCharQuoted()
    void tc_deserCharNull()
    void tc_deserCharNullQuoted()
    void tc_deserCharEscape()
    void tc_deserCharEscapeQuoted()

    void tc_deserInt8()
    void tc_deserInt8Minus()
    void tc_deserInt8Overflow()

    void tc_deserInt16()
    void tc_deserInt16Minus()
    void tc_deserInt16Overflow()

    void tc_deserInt32()
    void tc_deserInt32Minus()
    void tc_deserInt32Overflow()

    void tc_deserInt64()
    void tc_deserInt64Minus()

    void tc_deserUint8()
    void tc_deserUint8Overflow()

    void tc_deserUint16()
    void tc_deserUint16Overflow()

    void tc_deserUint32()
    void tc_deserUint32Overflow()

    void tc_deserUint64()

    void tc_deserString()
    void tc_deserStringQuotes()
    void tc_deserStringQuotesWhitespaces()
    void tc_deserStringEscape()
    void tc_deserStringWhitespace()
    void tc_deserStringWhitespaceTrailing()
    void tc_deserStringWhitespaceTrailingNoType()

    void tc_deserComposite()
    void tc_deserCompositeNoType()
    void tc_deserCompositeWhitespace()
    void tc_deserCompositeMembers()
    void tc_deserCompositeMixed()

    void tc_deserCollection()
    void tc_deserCollectionComplex()

    void tc_deserInheritance()
    void tc_deserInheritanceMembers()
    void tc_deserInheritanceMixed()

    void tc_deserCompositeNested()
    void tc_deserCompositeNestedMembers()
    void tc_deserCompositeNestedMixed()

    void tc_deserAnonymousSimple()
    void tc_deserAnonymousNested()
    void tc_deserAnonymousMultiple()
    void tc_deserAnonymousReuse()
    void tc_deserAnonymousReuseNested()

test::Suite Env::
    void tc_envparseSimpleFormat()
    void tc_envparseSimpleReplace()
    void tc_envparseReplaceMultiple()
    void tc_envparseReplaceWithSameVariable()
    void tc_envparseFormatAndReplace()
    void tc_envparseVariableNotFound()

    void tc_setenvSimple()
    void tc_setenvSimpleFormat()
    void tc_setenvSimpleReplace()
    void tc_setenvReplaceMultiple()
    void tc_setenvReplaceWithSameVariable()
    void tc_setenvFormatAndReplace()
    void tc_setenvVariableNotFound()
    void tc_setenvNull()


test::Suite Project::
    void setup() method
    void teardown() method
    void tc_app()
    void tc_appNoTest()
    void tc_package()
    void tc_packageLocal()

test::Suite Args::
    void tc_matchSingle()
    void tc_matchMultiple()
    void tc_matchDuplicate()
    void tc_matchPattern()
    void tc_matchAll()
    void tc_matchNone()
    void tc_matchErr()
    void tc_matchSingleArg()
    void tc_matchMultipleArg()
    void tc_matchDuplicateArg()
    void tc_matchFixed()
    void tc_matchOptional()
    void tc_matchOptionalOneArg()
    void tc_matchOptionalWithOtherArgs()
    void tc_matchShell()
    void tc_matchCreate()
    void tc_matchCreateMultiple()
    void tc_matchCreateApp()
    void tc_matchCreatePackage()
    void tc_matchCreatePackageAndApp()
    void tc_matchCreatePackageAndAppEscaped()
    void tc_matchCreatePackageOptions()
    void tc_matchAddNoProject()
